<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE project>

<project xmlns:artifact="antlib:org.apache.maven.artifact.ant"
	name="chamomile" default="war" basedir=".">
	
	<!-- ant properties -->
	<!-- <property environment="env" />  -->
	<property file="build.properties" />

	<property name="webapp.output" value="WebContent" />
    <property name="j2js-api.location" value="../j2js-api"/>
    <property name="j2js-jre.location" value="../j2js-jre"/>
    <property name="j2js-compiler.location" value="../j2js-compiler"/>
	
	<target name="init">
		<tstamp />
		<mkdir dir="lib/provided" />
		<mkdir dir="dist" />
		<mkdir dir="${webapp.output}/WEB-INF/classes" />
		<mkdir dir="${webapp.output}/WEB-INF/lib" />
	</target>
	
	<!-- BEGIN: Maven2 ANT Task -->
	
	<target name="maven-init">
		<path id="maven-ant-tasks.classpath" path="ant-tasks/maven-ant-tasks-2.1.3.jar" />
		<typedef resource="org/apache/maven/artifact/ant/antlib.xml"
			uri="antlib:org.apache.maven.artifact.ant" classpathref="maven-ant-tasks.classpath" />
		<!-- scope: runtime -->
		<artifact:pom id="mypom" file="ant-tasks/pom.xml" />
		<artifact:dependencies filesetId="dependency.fileset"
			sourcesFilesetId="sources.dependency.fileset" pomRefId="mypom"
			useScope="runtime" />
		<!-- scope: provided, test -->
		<artifact:dependencies filesetId="dependency.provided.fileset"
			sourcesFilesetId="sources.dependency.provided.fileset" pomRefId="mypom"
			scopes="provided, test" />
	</target>

	<target name="maven-retrieve" depends="maven-init">
		<mkdir dir="${webapp.output}/WEB-INF/lib" />
		<copy todir="${webapp.output}/WEB-INF/lib">
			<fileset refid="dependency.fileset" />
			<!-- This mapper strips off all leading directory information -->
			<mapper type="flatten" />
		</copy>	
		<mkdir dir="lib/maven/provided" />
		<copy todir="lib/maven/provided">
			<fileset refid="dependency.provided.fileset" />
			<!-- This mapper strips off all leading directory information -->
			<mapper type="flatten" />
		</copy>
	</target>

	<target name="maven-retrieve-sources" depends="maven-init,libs">
		<mkdir dir="lib/maven/sources" />
		<copy todir="lib/maven/sources">
			<fileset refid="sources.dependency.fileset" />
			<fileset refid="sources.dependency.provided.fileset" />
			<mapper type="flatten" />
		</copy>
	</target>
	
	<target name="maven-retrieve-all" 
		depends="maven-init,maven-retrieve,maven-retrieve-sources" />
	
	<target name="internal-maven-cleanup"><!-- used by 'maven-cleanup-all' -->
		<delete failonerror="false">
			<fileset dir="${webapp.output}/WEB-INF/lib"/>
			<fileset dir="lib/maven/provided"/>
			<fileset dir="lib/maven/sources"/>
		</delete>
	</target>
	
	<target name="maven-cleanup" description="Delete all maven libs" 
		depends="internal-maven-cleanup,libs"/>
	
	<target name="libs" depends="init" description="Copy libs to WEB-INF/lib (not maven)">		
		<copy todir="${webapp.output}/WEB-INF/lib">
			<fileset dir="lib">
				<include name="*.jar"/>
			</fileset>
		</copy>
	</target>
	
	<!-- END: Maven2 ANT Task -->
	
	<target name="src-filter" depends="init" description="Apply token filters">
		<!--
		<filter token="DTALK_URL" value="${dtalk.url}"/>
		<filter token="DB_DRIVER_NAME" value="${db.driver_name}"/>
		<filter token="DB_CONNECTION_URL" value="${db.connection_url}"/>
		<filter token="DB_CONNECTION_USERNAME" value="${db.connection_username}"/>
		<filter token="DB_CONNECTION_PASSWORD" value="${db.connection_password}"/>
		<delete file="src/com/arkasoft/store/Constants.java" />
		<copy filtering="true" tofile="src/com/arkasoft/store/Constants.java" 
			file="src/com/arkasoft/store/Constants.java-template" />
		-->
	</target>
	
	<path id="project.class.path">
		<pathelement location="${webapp.output}/WEB-INF/classes" />
        <pathelement location="${j2js-jre.location}/target/classes"/>
        <pathelement location="${j2js-api.location}/target/classes"/>
        <pathelement location="${j2js-compiler.location}/target/classes"/>
		<fileset dir="${webapp.output}/WEB-INF/lib" includes="**/*.jar" />
		<fileset dir="lib/maven/provided" includes="**/*.jar" />
		<fileset dir="lib/provided" includes="**/*.jar" />
	</path>

    <path id="j2js.classpath">
        <pathelement location="${j2js-api.location}/target/classes"/>
        <pathelement location="${j2js-jre.location}/target/classes"/>
        <pathelement location="${webapp.output}/WEB-INF/classes" />
    </path>
	
	<target name="javac" depends="init,libs,src-filter" description="Compile java source to bytecode">		
		<javac includeantruntime="false" srcdir="src" includes="**" 
			bootclasspath="${j2js-jre.location}/target/classes"
			encoding="utf-8" destdir="${webapp.output}/WEB-INF/classes"
			source="1.8" target="1.8" nowarn="true" debug="true" debuglevel="lines,vars,source">
			<classpath refid="project.class.path" />
		</javac>
		<copy todir="${webapp.output}/WEB-INF/classes">
			<fileset dir="src" excludes="**/*.java" />
			<fileset dir="resources" />
		</copy>
	</target>
	
	<target name="build" depends="javac" description="Build this project" >
	</target>
	
	<target depends="build" name="build-jar">
		<jar destfile="${ant.project.name}-${project.version}.jar" basedir="${webapp.output}" />
	</target>
	
	<target depends="build-subprojects,build" name="j2js-compile" description="Generate JavaScript">
		<pathconvert dirsep="/" pathsep="," property="dirs" refid="j2js.classpath"/>
		<echo message="${dirs}"/>

		<java classname="com.j2js.J2JSCompiler">
         	<arg value="."/>
         	<arg value="${dirs}"/>
         	<arg value="org.chamomile.j2js.demo.HelloWorld1"/>
         	<arg value="${webapp.output}/assemblies/HelloWorld1"/>
			<classpath refid="project.class.path" />
		</java>
		<!-- 
		<java classname="com.j2js.J2JSCompiler">
         	<arg value="."/>
         	<arg value="${dirs}"/>
         	<arg value="chamomile.j2js.demo.HelloWorld2"/>
         	<arg value="${webapp.output}/assemblies/HelloWorld2"/>
			<classpath refid="project.class.path" />
		</java>
		
		<java classname="com.j2js.J2JSCompiler">
         	<arg value="."/>
         	<arg value="${dirs}"/>
         	<arg value="chamomile.j2js.demo.SVGDemo"/>
         	<arg value="${webapp.output}/assemblies/SVGDemo"/>
			<classpath refid="project.class.path" />
		</java>
		 -->
	</target>
    <target name="build-subprojects">
        <ant antfile="build.xml" dir="${j2js-api.location}" inheritAll="false" target="build-project"/>
        <ant antfile="build.xml" dir="${j2js-jre.location}" inheritAll="false" target="build-project"/>
        <ant antfile="build.xml" dir="${j2js-compiler.location}" inheritAll="false" target="build-project"/>
    </target>
	
	<target name="war" depends="build" description="Create a war file">
		<zip destfile="${ant.project.name}-${app.version}.war" basedir="${webapp.output}" />
		<copy tofile="${ant.project.name}.war" file="${ant.project.name}-${app.version}.war" />
	</target>
	
	<target name="clean" description="Cleans this project">
		<delete dir="${webapp.output}/WEB-INF/classes" failonerror="false" />
		<delete dir="${webapp.output}/${ant.project.name}-${app.version}" failonerror="false" />
		<delete dir="${webapp.output}/assemblies" failonerror="false" />
	</target>
	
	<target name="cleanall" depends="clean" description="Cleans this project">
		<delete file="./j2js.cache" />
		<delete file="./*.war" />
	</target>
</project>